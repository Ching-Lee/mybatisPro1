<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org/DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--namespace命名空间，作用就是对sql进行分类化管理，理解sql隔离
注：使用mapper代理方法开发，namespace有特殊作用
-->

<mapper namespace="user">
    <!--映射文件中配置很多的sql语句-->
    <!--需求：通过id查询用户表的记录-->
    <!--通过select执行数据库查询
     id:标识映射文件的sql
     parameterType：指定输入参数类型，这里输入的id是int型
     #{}表示占位符
     #{id}其中的id表示接收输入的参数，参数名称就是id
     resultType：指定查询结果映射的java对象类型，这里是单条对象
    -->
    <select id="findUserById" parameterType="int" resultType="com.chinglee.mybatis.pojo.User">
       SELECT * FROM user WHERE id=#{id}
    </select>

    <!--根据用户名查询信息
    resultType:指定的单条记录所映射的java对象类型
    ${}:表示拼接sql串，将接收到的参数不加任何修饰拼接在sql中。
    使用${}拼接sql，引起sql注入
    ${value}:接受输入参数的内容，如果传入类型是简单类型，${}中只能使用value

    -->

    <select id="findUserByName" parameterType="java.lang.String" resultType="com.chinglee.mybatis.pojo.User">
        SELECT * FROM user WHERE username LIKE '%${value}%'
    </select>
    <!--
    parameterType:指定输入参数类型是pojo
    #{}中指定pojo的属性名，接收到pojo对象的属性值，mybatis通过OGNL获取对象的属性值
    -->
    <insert id="insertUser" parameterType="com.chinglee.mybatis.pojo.User">
        <!--
           将插入数据的主键返回，返回到user对象中
            SELECT LAST_INSERT_ID():得到刚insert进去记录的主键值，
            只适用于自增主键
            keyProperty：将查询到主键值设置到parameterType指定的对象的
            哪个属性
            order： SELECT LAST_INSERT_ID()相对于INSERT INTO user的执行顺序
            指定结果类型 resultType="java.lang.Integer"
        -->
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
             SELECT LAST_INSERT_ID()
        </selectKey>
        INSERT INTO user(username,birthday,sex,address) VALUE (#{username},#{birthday},#{sex},#{address})


        <!--非自增主键
        使用musql的uuid生成主键
        执行过程：
        首先通过uuid（）得到主键，将主键设置到user对象的id属性中
        其次在insert执行时，从user对象中取出id属性值
        <selectKey keyProperty="id" order="BEFORE" resultType="java.lang.String">
            SELECT uuid()
        </selectKey>
        INSERT INTO user(id,username,birthday,sex,address) VALUE (#{id},#{username},#{birthday},#{sex},#{address})
    -->
    </insert>

    <!--delete删除用户，根据id删除用户，需要输入id值-->
    <delete id="deleteUser" parameterType="java.lang.Integer">
        DELETE FROM user WHERE id=#{id};
    </delete>
    <!--更新用户，传入id，传入用户的更新信息，parameterType指定user对象，注意id必须存在
    #{id}表示更新user的id值
    -->
    <update id="updateUser" parameterType="com.chinglee.mybatis.pojo.User">
        UPDATE user SET username=#{username},birthday=#{birthday},sex=#{sex},address=#{address}WHERE id=#{id}
    </update>
</mapper>